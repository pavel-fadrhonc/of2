using UnityEngine;
using UnityEngine.Audio;
using UnityEditor;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using UnityEditor.AnimatedValues;
using System.IO;
using System;
using UnityEditor.SceneManagement;
using UnityEngine.SceneManagement;
using UnityEditor.IMGUI.Controls;

//TODO Fix drag parent to child
namespace of2.Audio
{
    public class AudioManagerCategoriesWindow : EditorWindow
    {

        [SerializeField] private TreeViewState m_TreeViewState;

        private AudioManagerTreeView m_TreeView;
        private SearchField m_SearchField;

        [SerializeField]
        private AudioManagerCategory m_Tree = null;
        [SerializeField]
        private AudioManagerCategory m_NodeToDraw = null;
        private SerializedObject m_Object;
        [SerializeField]
        private AudioManagerData m_AudioManagerRootData;

        private Vector2 m_ScrollPos;
        private Vector2 m_ScrollPos2;
        private Vector2 m_ScrollList;

        private int m_ListIncrIdx;

        private bool m_IsChanged = false;
        
        [MenuItem("of2/Audio Manager/Manager...")]
        public static void ShowWindow()
        {
            //Show existing window instance. If one doesn't exist, make one.
            EditorWindow.GetWindow(typeof(AudioManagerCategoriesWindow));
        }

        [MenuItem("of2/Audio Manager/Print unused files")]
        public static void PrintUnusedFiles()
        {
            AudioPreferences prefs = AudioPreferences.Instance;
            var data = AssetDatabase.LoadAssetAtPath<AudioManagerData>(prefs.AudioManagerDataPrefabPath);
            if (data == null)
            {
                D.AudioError("No audio data present!");
                return;
            }

            data.ReconstructTreeChildren();

            HashSet<string> usedFilenames = new HashSet<string>();
            data.TreeData.GetAllLeafs().ForEach(l =>
            {
                l.AudioData.ForEach(path =>
                {
                    if (!string.IsNullOrEmpty(path))
                    {
                        string filename = Path.GetFileName(path);
                        if (!usedFilenames.Contains(filename))
                        {
                            usedFilenames.Add(filename);
                        }
                    }
                });
            });

            HashSet<string> unusedAssetPaths = new HashSet<string>();
            string[] guids = AssetDatabase.FindAssets("t:AudioClip");
            foreach (string guid in guids)
            {
                string path = AssetDatabase.GUIDToAssetPath(guid);
                string filename = Path.GetFileName(path);
                if (!usedFilenames.Contains(filename))
                {
                    unusedAssetPaths.Add(path);
                }
            }

            foreach (string path in unusedAssetPaths)
            {
                //AssetDatabase.DeleteAsset(path);
                Debug.Log(path);
            }
        }


        public static FieldInfo LastControlIdField = typeof(EditorGUIUtility).GetField("s_LastControlID", BindingFlags.Static | BindingFlags.NonPublic);
        public static int GetLastControlId()
        {
            if (LastControlIdField == null)
            {
                D.AudioError("Compatibility with Unity broke: can't find lastControlId field in EditorGUI");
                return 0;
            }
            return (int)LastControlIdField.GetValue(null);
        }

        void SaveLeafsToEnum(AudioManagerCategory root)
        {
            List<AudioManagerCategory> cats = root.GetLeafDictionary().Values.OrderBy(c => c.ID).ToList();
            AudioPreferences p = AudioPreferences.Instance;

            string guid = AssetDatabase.FindAssets(p.AudioEnumName).FirstOrDefault();
            string filePath = p.AudioManagerProjectSpecificFolder + p.AudioEnumName + ".cs";
            if (guid != null)
            {
                filePath = AssetDatabase.GUIDToAssetPath(guid);
            }
            filePath = filePath.Replace("Assets/", "");

            Debug.Log("Path: " + filePath);

            StringWriter sw = new StringWriter();
            sw.WriteLine("// This file is autogenerated by AudioManager!");
            sw.WriteLine(System.Environment.NewLine);
            
            sw.WriteLine("using of2.Audio;");
            sw.WriteLine("public class AudioList {");

            // Enum
            sw.WriteLine("\tpublic enum Sounds {");
            sw.WriteLine("\t\tNONE" + " = " + -1 + ",");
            foreach (AudioManagerCategory cat in cats)
            {
                sw.WriteLine("\t\t" + cat.EnumString + " = " + cat.UniqueID + ",");
            }
            sw.WriteLine("\t}" + System.Environment.NewLine);

            // Switch with actual names - enum to string
            //sw.WriteLine("\tpublic static string Get(Sounds s){");
            

            //sw.WriteLine("\t}");


            sw.WriteLine("}" + System.Environment.NewLine);
            
            sw.WriteLine("public class ProjectSpecificAudioHelper : IAudioManagerHelper{");
            sw.WriteLine("\tpublic string AudioEnumToStringId(int enumAsInt){");
            sw.WriteLine("\t\tAudioList.Sounds soundEnum = (AudioList.Sounds) enumAsInt;");
            sw.WriteLine("\t\tstring soundIdStr = null;");
            sw.WriteLine("\t\t  switch(soundEnum){");
            foreach (AudioManagerCategory cat in cats)
            {
                sw.WriteLine("\t\tcase AudioList.Sounds." + cat.EnumString + ":");
                sw.WriteLine("\t\t\tsoundIdStr = \"" + cat.ID + "\";");
                sw.WriteLine("\t\t\tbreak;");
            }

            sw.WriteLine("\t\t}" + System.Environment.NewLine + "\t\treturn soundIdStr;");
            sw.WriteLine("\t}");
            sw.WriteLine("}");
            
            Directory.CreateDirectory(Path.Combine(Application.dataPath, Path.GetDirectoryName(filePath)));
            File.WriteAllText(Path.Combine(Application.dataPath, filePath), sw.ToString());

            AssetDatabase.SaveAssets();
            AssetDatabase.Refresh();
        }

        private void DoTheFirstTimeSetup()
        {
            AudioPreferences p = AudioPreferences.Instance;
            // generate project specific installer
            string installerGuid = AssetDatabase.FindAssets(AudioPreferences.ProjectSpecificAudioManagerInstallerName).FirstOrDefault();
            string filePath = p.AudioManagerProjectSpecificFolder + AudioPreferences.ProjectSpecificAudioManagerInstallerName + ".cs";
            if (installerGuid != null)
            {
                filePath = AssetDatabase.GUIDToAssetPath(installerGuid);
            }
            filePath = filePath.Replace("Assets/", "");

            Debug.Log("Installer Path: " + filePath);

            StringWriter sw = new StringWriter();
            sw.WriteLine("// This file is autogenerated by AudioManager!");
            sw.WriteLine("using of2.Audio;");
            sw.WriteLine("public class ProjectSpecificAudioManagerInstaller : AudioManagerInstaller {");
            sw.WriteLine("\tpublic override void InstallBindings() {");
            sw.WriteLine("\t\tbase.InstallBindings();");
            sw.WriteLine("\t\tContainer.Bind<IAudioManagerHelper>().To<ProjectSpecificAudioHelper>().AsSingle();");
            sw.WriteLine("\t}");
            sw.WriteLine("}");
            
            Directory.CreateDirectory(Path.Combine(Application.dataPath, Path.GetDirectoryName(filePath)));
            File.WriteAllText(Path.Combine(Application.dataPath, filePath), sw.ToString());
            AssetDatabase.SaveAssets();
            AssetDatabase.Refresh(ImportAssetOptions.ForceSynchronousImport);

            // create a variant of installer prefab
            string prefabGuid = AssetDatabase.FindAssets(AudioPreferences.AudioManagerInstallerPrefabName).FirstOrDefault();
            string prefabPath = AssetDatabase.GUIDToAssetPath(prefabGuid);
            prefabPath = prefabPath.Replace("Assets/", "");
            
            Debug.Log("Installer Prefab Path: " + filePath);

            var prefab = AssetDatabase.LoadAssetAtPath<GameObject>(prefabPath);
            var instatiatedPrefab = PrefabUtility.InstantiatePrefab(prefab) as GameObject;
            instatiatedPrefab.AddComponent(Type.GetType(AudioPreferences.ProjectSpecificAudioManagerInstallerName + ", Assembly-CSharp") );
            
            // establish AudioManagerData reference
            var gam = instatiatedPrefab.GetComponentInChildren<GlobalAudioManager>();
            var audioData = LoadOrCreateAudioData();
            gam.AudioData = audioData;
            AssetDatabase.SaveAssets();
            AssetDatabase.Refresh(ImportAssetOptions.ForceSynchronousImport);

            // set default bus reference
            if (audioData.TreeData.DefaultBus == null)
            {
                string defaultAudioMixerPath = AssetDatabase.GUIDToAssetPath(AssetDatabase.FindAssets("DefaultAudioMixer.Audio.of2").FirstOrDefault());;
                string projectAudioMixerPath = p.AudioManagerProjectSpecificFolder + "DefaultAudioMixer.mixer";
                if (!AssetDatabase.CopyAsset(defaultAudioMixerPath, projectAudioMixerPath))
                {
                    D.AudioError("Can't copy default AudioMixer into " + projectAudioMixerPath);
                }
 
                AssetDatabase.SaveAssets();
                AssetDatabase.Refresh(ImportAssetOptions.ForceSynchronousImport);                
                
                var projectDefaultAudioMixer = AssetDatabase.LoadAssetAtPath<AudioMixer>(projectAudioMixerPath);
                audioData.TreeData.DefaultBus = projectDefaultAudioMixer.FindMatchingGroups("Master").FirstOrDefault();
            }
            
            PrefabUtility.SaveAsPrefabAssetAndConnect(instatiatedPrefab,
                p.AudioManagerProjectSpecificFolder + AudioPreferences.ProjectSpecificAudioManagerInstallerName +
                ".prefab", InteractionMode.AutomatedAction);
            DestroyImmediate(instatiatedPrefab);

            AssetDatabase.SaveAssets();
            AssetDatabase.Refresh();
        }
        
        private void DummyReplacerHelper()
        {
            string source = "Hound";
            string toReplace = "Giraffe";
            foreach (var c in m_AudioManagerRootData.TreeData.GetAllLeafs())
            {
                if (c.ID.Contains(source) && c.IsLeaf())
                {
                    AudioManagerCategory newCat = m_AudioManagerRootData.CreateAudioManagerCategory(c.ID.Replace(source, toReplace));

                    newCat.AudioData = c.AudioData.ToList();
                    newCat.AudioDataWeight = c.AudioDataWeight.ToList();

                    c.Parent.Add(newCat);
                }
            }
        }

        void OnGUI()
        {
            var firstTimeSetup = GUILayout.Button("First time setup");
            if (firstTimeSetup)
            {
                Save();

                DoTheFirstTimeSetup();
            }
            
            m_ListIncrIdx = 0;
            GUI.changed = false;
            if (m_Tree == null)
            {
                EditorGUILayout.SelectableLabel("Loading", "box");
            }
            else
            {
                if (m_Tree != m_AudioManagerRootData.TreeData)
                {
                    m_Tree = m_AudioManagerRootData.TreeData;
                }

                GUILayoutOption[] options1 = { GUILayout.MaxWidth(EditorGUIUtility.currentViewWidth * 0.4f), GUILayout.MinWidth(10.0f) };
                GUILayoutOption[] options2 = { GUILayout.MaxWidth(EditorGUIUtility.currentViewWidth * 0.58f), GUILayout.MinWidth(20.0f) };
                GUILayoutOption[] options3 = { GUILayout.MaxWidth(EditorGUIUtility.currentViewWidth * 0.02f), GUILayout.MinWidth(0f) };

                EditorGUILayout.BeginHorizontal();
                {

                    EditorGUILayout.BeginVertical("box", options1);
                    {
                        GUILayoutOption[] expand = { GUILayout.ExpandWidth(true) };

                        EditorGUILayout.BeginVertical("box", expand);
                        {
                            // Options
                            EditorGUILayout.BeginHorizontal(GUI.skin.FindStyle("Toolbar"), expand);
                            {
                                if (GUILayout.Button("+", GUI.skin.FindStyle("toolbarbutton"), GUILayout.Width(20)))
                                {
                                    AudioManagerCategory cat = m_AudioManagerRootData.CreateAudioManagerCategory("New Group " + UnityEngine.Random.Range(1, 10000000));
                                    m_AudioManagerRootData.TreeData.Add(cat);
                                }
                                m_TreeView.searchString = m_SearchField.OnToolbarGUI(m_TreeView.searchString);
                                if (GUILayout.Button("Save", GUI.skin.FindStyle("toolbarbutton"), GUILayout.Width(120)))
                                {
                                    Save();
                                    return;
                                }
                            }
                            EditorGUILayout.EndHorizontal();

                        }
                        EditorGUILayout.EndVertical();

                        EditorGUILayout.BeginVertical("box", GUILayout.ExpandHeight(true), GUILayout.ExpandWidth(true));
                        {
                        }
                        EditorGUILayout.EndVertical();

                        Rect r = GUILayoutUtility.GetLastRect();
                        m_TreeView.OnGUI(r);

                    }
                    EditorGUILayout.EndVertical();

                    EditorGUILayout.BeginVertical(options3);
                    {

                    }
                    EditorGUILayout.EndVertical();

                    EditorGUILayout.BeginVertical("box", options2);
                    {
                        m_ScrollPos2 = EditorGUILayout.BeginScrollView(m_ScrollPos2);
                        DrawSelectedWindow();
                        EditorGUILayout.EndScrollView();
                    }
                    EditorGUILayout.EndVertical();
                }
                EditorGUILayout.EndHorizontal();
            }
            if (GUI.changed)
            {
                m_AudioManagerRootData.TreeData = m_Tree;
                m_IsChanged = true;
                EditorSceneManager.sceneSaving -= OnSceneSaved;
                EditorSceneManager.sceneSaving += OnSceneSaved;
            }
        }

        void OnLostFocus()
        {
            if (m_IsChanged)
            {
                //Save();
            }
        }

        private void OnSceneSaved(Scene scene, string path)
        {
            Save();
        }

        private Dictionary<long, GameObject> m_ObjectsToDestroy = new Dictionary<long, GameObject>();

        private void PlaySound(AudioManagerCategory c, string clipPath)
        {
            AudioClip a = AssetDatabase.LoadAssetAtPath<AudioClip>(clipPath);
            if (a == null) return;

            GameObject go = new GameObject();
            go.hideFlags = HideFlags.DontSaveInEditor | HideFlags.HideInHierarchy;
            AudioSource s = go.AddComponent<AudioSource>();
            AudioClipPlayer p = go.AddComponent<AudioClipPlayer>();
            s.outputAudioMixerGroup = c.GetClosestBus();
            s.volume = c.Volume;
            if (c.PitchRandomization)
            {
                float pitchRand = Mathf.Abs(c.PitchRandomizationValue);
                s.pitch = 1.0f + UnityEngine.Random.Range(-pitchRand, pitchRand);
            }

            p.SetFilters(c);
            s.clip = a;
            p.Setup( null, null, null);
            p.SetClip(a, null, 0, 0, "");
            p.PlayDelayed(0);
            m_ObjectsToDestroy[DateTime.Now.Ticks + (long)(a.length * 10000000)] = go;
        }

        private void ManualUpdate()
        {
            if (m_ObjectsToDestroy.Count == 0) return;

            long nowTicks = DateTime.Now.Ticks;
            foreach (var kv in m_ObjectsToDestroy.ToList())
            {
                if (kv.Key < nowTicks)
                {
                    D.AudioLog("Cleaning editor audio");
                    m_ObjectsToDestroy.Remove(kv.Key);
                    DestroyImmediate(kv.Value);
                }
            }
        }

        private void DrawSelectedWindow()
        {
            if (m_NodeToDraw == null) return;

            GUILayoutOption[] LabelFieldOptions = { GUILayout.MaxWidth(100.0f), GUILayout.MinWidth(10.0f) };
            GUILayoutOption[] TextFieldOptions = { GUILayout.MaxWidth(800.0f), GUILayout.MinWidth(10.0f) };

            EditorGUILayout.BeginVertical("box");
            {
                EditorGUILayout.BeginHorizontal(GUI.skin.FindStyle("Toolbar"), GUILayout.ExpandWidth(true));
                {
                    var nodeHierachy = new List<AudioManagerCategory>();
                    var node = m_NodeToDraw;
                    while (node.Parent != null)
                    {
                        nodeHierachy.Add(node);

                        node = node.Parent;
                    }

                    nodeHierachy.Reverse();

                    for (int i = 0; i < nodeHierachy.Count; i++)
                    {
                        var n = nodeHierachy[i];

                        if (GUILayout.Button(n.ID, GUI.skin.FindStyle("toolbarbutton"), GUILayout.MaxWidth(100)))
                        {
                            m_NodeToDraw = n;
                            m_TreeView.SetSelection(new List<int> { m_NodeToDraw.UniqueID });
                        }

                        if (i < nodeHierachy.Count - 1)
                        {
                            EditorGUILayout.TextField(">", GUILayout.Width(16), GUILayout.Height(16));
                        }
                    }
                }
                EditorGUILayout.EndHorizontal();

            }
            EditorGUILayout.EndVertical();

            EditorGUILayout.BeginVertical("box");
            {

                EditorGUILayout.BeginHorizontal();
                {
                    GUILayout.Label("Name:", LabelFieldOptions);
                    string newID = EditorGUILayout.TextField(m_NodeToDraw.ID, TextFieldOptions);
                    if (newID != m_NodeToDraw.ID)
                    {
                        m_NodeToDraw.ID = newID;
                        m_TreeView.Reload();
                    }

                    EditorGUILayout.LabelField("Mixer Group:", GUILayout.Width(80));
                    m_NodeToDraw.DefaultBus = EditorGUILayout.ObjectField(m_NodeToDraw.DefaultBus, typeof(AudioMixerGroup), false, TextFieldOptions) as AudioMixerGroup;
                }
                EditorGUILayout.EndHorizontal();

                EditorGUILayout.BeginHorizontal();
                {
                    GUILayout.Label("ID (read only):", GUILayout.Width(90));
                    EditorGUILayout.TextField("" + m_NodeToDraw.UniqueID, TextFieldOptions);
                }
                EditorGUILayout.EndHorizontal();

                EditorGUILayout.Separator();


                List<AudioManagerCategory> leafChildren = m_NodeToDraw.GetLeafChildren();
                if (leafChildren.Count > 0)
                {
                    EditorGUILayout.BeginHorizontal();
                    {
                        EditorGUILayout.LabelField("Category cooldown [s]:", GUILayout.Width(150));
                        m_NodeToDraw.NextAllowedAudioDelay = EditorGUILayout.Slider(m_NodeToDraw.NextAllowedAudioDelay, -1, 10);
                    }
                    EditorGUILayout.EndHorizontal();

                    EditorGUILayout.BeginHorizontal();
                    {
                        GUILayout.Label("Blocked by category:", GUILayout.Width(150));
                        string catsString = string.Join(",", m_NodeToDraw.BlockedByCategoryIds.Select(i => i.ToString()).ToArray());
                        catsString = EditorGUILayout.TextField("" + catsString, TextFieldOptions);
                        List<int> ids = new List<int>();
                        foreach (var stringId in catsString.Split(','))
                        {
                            int realId = 0;
                            Int32.TryParse(stringId, out realId);
                            ids.Add(realId);
                        }
                        m_NodeToDraw.BlockedByCategoryIds = ids.ToArray();

                    }
                    EditorGUILayout.EndHorizontal();

                    m_ScrollList = EditorGUILayout.BeginScrollView(m_ScrollList);
                    for (int i = 0; i < leafChildren.Count; i++)
                    {
                        EditorGUILayout.BeginVertical("box");
                        {

                            EditorGUILayout.BeginHorizontal();
                            {
                                if (GUILayout.Button("◎", GUILayout.Width(20), GUILayout.Height(16)))
                                {
                                    m_NodeToDraw = leafChildren[i];
                                    return;
                                }
                                leafChildren[i].ID = EditorGUILayout.TextField(leafChildren[i].ID, TextFieldOptions);
                                leafChildren[i].SoundRandomization = EditorGUILayout.ToggleLeft("SR", leafChildren[i].SoundRandomization, GUILayout.Width(35f));
                                leafChildren[i].PitchRandomization = EditorGUILayout.ToggleLeft("PR", leafChildren[i].PitchRandomization, GUILayout.Width(35f));
                            }
                            EditorGUILayout.EndHorizontal();
                            leafChildren[i].Volume = EditorGUILayout.Slider(leafChildren[i].Volume, 0f, 1f);

                        }
                        EditorGUILayout.EndVertical();
                    }
                    EditorGUILayout.EndScrollView();
                }

                if (m_NodeToDraw.IsLeaf())
                {
                    AnimBool m_UseChorusFilter = new AnimBool(m_NodeToDraw.UseChorusFilter);
                    AnimBool m_UseDistortionFilter = new AnimBool(m_NodeToDraw.UseDistortionFilter);
                    AnimBool m_UseEchoFilter = new AnimBool(m_NodeToDraw.UseEchoFilter);
                    AnimBool m_UseHighPassFilter = new AnimBool(m_NodeToDraw.UseHighPassFilter);
                    AnimBool m_UseLowPassFilter = new AnimBool(m_NodeToDraw.UseLowPassFilter);
                    AnimBool m_UseReverbFilter = new AnimBool(m_NodeToDraw.UseReverbFilter);
                    AnimBool m_UseFadeOut = new AnimBool(m_NodeToDraw.UseFadeOut);
                    AnimBool m_UseFadeIn = new AnimBool(m_NodeToDraw.UseFadeIn);

                    EditorGUILayout.BeginHorizontal();
                    {
                        EditorGUILayout.LabelField("Trigger Cooldown [s]:", GUILayout.Width(150));
                        m_NodeToDraw.NextAllowedAudioDelay = EditorGUILayout.Slider(m_NodeToDraw.NextAllowedAudioDelay, -1, 10);
                    }
                    EditorGUILayout.EndHorizontal();

                    EditorGUILayout.BeginHorizontal();
                    {


                        EditorGUILayout.LabelField("Volume:", GUILayout.Width(55f));
                        m_NodeToDraw.Volume = EditorGUILayout.Slider(m_NodeToDraw.Volume, 0f, 1f);

                        EditorGUILayout.LabelField("Stereo Pan:", GUILayout.Width(75f));
                        m_NodeToDraw.StereoPan = EditorGUILayout.Slider(m_NodeToDraw.StereoPan, -1f, 1f);
                    }
                    EditorGUILayout.EndHorizontal();

                    EditorGUILayout.BeginHorizontal();
                    {
                        m_NodeToDraw.PitchRandomization = EditorGUILayout.ToggleLeft("Pitch Randomization", m_NodeToDraw.PitchRandomization, GUILayout.Width(200));
                        if (m_NodeToDraw.PitchRandomization)
                        {
                            m_NodeToDraw.PitchRandomizationValue = EditorGUILayout.Slider(m_NodeToDraw.PitchRandomizationValue, 0f, 1f);
                        }
                    }
                    EditorGUILayout.EndHorizontal();

                    EditorGUILayout.BeginHorizontal();
                    {
                        m_NodeToDraw.Loop = EditorGUILayout.ToggleLeft("Looping", m_NodeToDraw.Loop, GUILayout.Width(70));
                    }
                    EditorGUILayout.EndHorizontal();

                    EditorGUILayout.BeginHorizontal();
                    {
                        m_NodeToDraw.SoundRandomization = EditorGUILayout.ToggleLeft("Randomize Clip Order", m_NodeToDraw.SoundRandomization, GUILayout.Width(150));
                    }
                    EditorGUILayout.EndHorizontal();

                    if (m_NodeToDraw.AudioData.Count == 0) m_NodeToDraw.NewAudioData();

                    EditorGUILayout.Separator();
                    EditorGUILayout.Separator();

                    EditorGUILayout.BeginHorizontal();
                    {
                        EditorGUILayout.LabelField("Audio Clips", GUILayout.Width(70f));

                        if (GUILayout.Button("+", GUILayout.Width(40)))
                        {
                            m_NodeToDraw.NewAudioData();
                        }
                    }
                    EditorGUILayout.EndHorizontal();

                    EditorGUILayout.BeginVertical("box");
                    for (int i = 0; i < m_NodeToDraw.AudioData.Count; i++)
                    {
                        EditorGUILayout.BeginHorizontal();
                        {
                            AudioClip c = AssetDatabase.LoadAssetAtPath<AudioClip>(m_NodeToDraw.AudioData[i]);
                            AudioClip selectedObject = (AudioClip)EditorGUILayout.ObjectField(c, typeof(AudioClip), false);
                            c = selectedObject;

                            string clipPath = c != null ? AssetDatabase.GetAssetPath(c) : null;
                            m_NodeToDraw.AudioData[i] = clipPath;
                            if (!string.IsNullOrEmpty(clipPath))
                            {
                                if (GUILayout.Button("▶", GUILayout.Width(60)))
                                    PlaySound(m_NodeToDraw, clipPath);
                            }

                            if (GUILayout.Button("-", GUILayout.Width(30)))
                                m_NodeToDraw.RemoveAudioData(i);

                        }
                        EditorGUILayout.EndHorizontal();
                    }
                    EditorGUILayout.EndVertical();

                    EditorGUILayout.Separator();
                    EditorGUILayout.Separator();
                    EditorGUILayout.BeginHorizontal();
                    {
                        EditorGUILayout.LabelField("Filters", GUILayout.Width(70f));
                    }
                    EditorGUILayout.EndHorizontal();

                    EditorGUILayout.BeginVertical("box");//"Use Chorus Filter", 
                    m_UseChorusFilter.target = EditorGUILayout.ToggleLeft("Use Chorus Filter", m_UseChorusFilter.target);
                    if (EditorGUILayout.BeginFadeGroup(m_UseChorusFilter.faded))
                    {
                        if (m_NodeToDraw.AudioFilters.Chorus == null) { m_NodeToDraw.AudioFilters.Chorus = new AudioChorusFilterData(); }
                        AudioChorusFilterData filterData = m_NodeToDraw.AudioFilters.Chorus;

                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField("Delay");
                        filterData.delay = EditorGUILayout.Slider(filterData.delay, 0.1f, 100.0f);
                        EditorGUILayout.EndHorizontal();
                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField("Depth");
                        filterData.depth = EditorGUILayout.Slider(filterData.depth, 0f, 1.0f);
                        EditorGUILayout.EndHorizontal();
                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField("Dry Mix");
                        filterData.dryMix = EditorGUILayout.Slider(filterData.dryMix, 0f, 1.0f);
                        EditorGUILayout.EndHorizontal();
                    }
                    EditorGUILayout.EndFadeGroup();
                    EditorGUILayout.EndVertical();

                    EditorGUILayout.BeginVertical("box");//"Use Distortion Filter", 
                    m_UseDistortionFilter.target = EditorGUILayout.ToggleLeft("Use Distortion Filter", m_UseDistortionFilter.target);
                    if (EditorGUILayout.BeginFadeGroup(m_UseDistortionFilter.faded))
                    {
                        if (m_NodeToDraw.AudioFilters.Distortion == null) { m_NodeToDraw.AudioFilters.Distortion = new AudioDistortionFilterData(); }
                        AudioDistortionFilterData filterData = m_NodeToDraw.AudioFilters.Distortion;

                        EditorGUILayout.BeginVertical();
                        EditorGUILayout.LabelField("Warning: High distortion level may damage your sound equipment.");
                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField("Distortion Level");
                        filterData.DistortionLevel = EditorGUILayout.Slider(filterData.DistortionLevel, 0f, 1.0f);
                        EditorGUILayout.EndHorizontal();
                        EditorGUILayout.EndVertical();
                    }
                    EditorGUILayout.EndFadeGroup();
                    EditorGUILayout.EndVertical();

                    EditorGUILayout.BeginVertical("box");//"Use Echo Filter", 
                    m_UseEchoFilter.target = EditorGUILayout.ToggleLeft("Use Echo Filter", m_UseEchoFilter.target);
                    if (EditorGUILayout.BeginFadeGroup(m_UseEchoFilter.faded))
                    {
                        if (m_NodeToDraw.AudioFilters.Echo == null) { m_NodeToDraw.AudioFilters.Echo = new AudioEchoFilterData(); }
                        AudioEchoFilterData filterData = m_NodeToDraw.AudioFilters.Echo;

                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField("Decay Ratio");
                        filterData.decayRatio = EditorGUILayout.Slider(filterData.decayRatio, 0f, 1.0f);
                        EditorGUILayout.EndHorizontal();
                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField("Delay");
                        filterData.delay = EditorGUILayout.Slider(filterData.delay, 10f, 5000.0f);
                        EditorGUILayout.EndHorizontal();
                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField("Dry Mix");
                        filterData.dryMix = EditorGUILayout.Slider(filterData.dryMix, 0f, 1.0f);
                        EditorGUILayout.EndHorizontal();
                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField("Wet Mix");
                        filterData.wetMix = EditorGUILayout.Slider(filterData.wetMix, 0f, 1.0f);
                        EditorGUILayout.EndHorizontal();
                    }
                    EditorGUILayout.EndFadeGroup();
                    EditorGUILayout.EndVertical();

                    EditorGUILayout.BeginVertical("box");//"Use High Pass Filter", 
                    m_UseHighPassFilter.target = EditorGUILayout.ToggleLeft("Use High Pass Filter", m_UseHighPassFilter.target);
                    if (EditorGUILayout.BeginFadeGroup(m_UseHighPassFilter.faded))
                    {
                        if (m_NodeToDraw.AudioFilters.HighPass == null) { m_NodeToDraw.AudioFilters.HighPass = new AudioHighPassFilterData(); }
                        AudioHighPassFilterData filterData = m_NodeToDraw.AudioFilters.HighPass;

                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField("Cut Off Frequency");
                        filterData.cutoffFrequency = EditorGUILayout.Slider(filterData.cutoffFrequency, 10f, 22000.0f);
                        EditorGUILayout.EndHorizontal();
                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField("High Pass Resonance Q");
                        filterData.highpassResonanceQ = EditorGUILayout.FloatField(filterData.highpassResonanceQ);
                        EditorGUILayout.EndHorizontal();
                    }
                    EditorGUILayout.EndFadeGroup();
                    EditorGUILayout.EndVertical();

                    EditorGUILayout.BeginVertical("box");//"Use Low Pass Filter", 
                    m_UseLowPassFilter.target = EditorGUILayout.ToggleLeft("Use Low Pass Filter", m_UseLowPassFilter.target);
                    if (EditorGUILayout.BeginFadeGroup(m_UseLowPassFilter.faded))
                    {
                        if (m_NodeToDraw.AudioFilters.LowPass == null) { m_NodeToDraw.AudioFilters.LowPass = new AudioLowPassFilterData(); }
                        AudioLowPassFilterData filterData = m_NodeToDraw.AudioFilters.LowPass;

                        if (filterData.customCutoffCurve != null)
                        {
                            EditorGUILayout.BeginHorizontal();
                            EditorGUILayout.LabelField("Custom Cut Off Curve");
                            filterData.customCutoffCurve = EditorGUILayout.CurveField(filterData.customCutoffCurve);
                            EditorGUILayout.EndHorizontal();
                        }
                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField("Cut Off Frequency");
                        filterData.cutoffFrequency = EditorGUILayout.Slider(filterData.cutoffFrequency, 10f, 22000.0f);
                        EditorGUILayout.EndHorizontal();
                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField("Low Pass Resonance Q");
                        filterData.lowpassResonanceQ = EditorGUILayout.FloatField(filterData.lowpassResonanceQ);
                        EditorGUILayout.EndHorizontal();
                    }
                    EditorGUILayout.EndFadeGroup();
                    EditorGUILayout.EndVertical();

                    EditorGUILayout.BeginVertical("box");//"Use Reverb Filter", 
                    m_UseReverbFilter.target = EditorGUILayout.ToggleLeft("Use Reverb Filter", m_UseReverbFilter.target);
                    if (EditorGUILayout.BeginFadeGroup(m_UseReverbFilter.faded))
                    {
                        if (m_NodeToDraw.AudioFilters.Reverb == null) { m_NodeToDraw.AudioFilters.Reverb = new AudioReverbFilterData(); }
                        AudioReverbFilterData filterData = m_NodeToDraw.AudioFilters.Reverb;

                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField("Decay HF Ratio");
                        filterData.decayHFRatio = EditorGUILayout.Slider(filterData.decayHFRatio, 0.1f, 2.0f);
                        EditorGUILayout.EndHorizontal();
                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField("Reverberation Decay Time");
                        filterData.decayTime = EditorGUILayout.Slider(filterData.decayTime, 0.1f, 20.0f);
                        EditorGUILayout.EndHorizontal();
                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField("Reverberation Density");
                        filterData.density = EditorGUILayout.Slider(filterData.density, 0f, 100.0f);
                        EditorGUILayout.EndHorizontal();
                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField("Reverberation Diffusion");
                        filterData.diffusion = EditorGUILayout.Slider(filterData.diffusion, 0f, 100.0f);
                        EditorGUILayout.EndHorizontal();
                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField("Mix Dry Level");
                        filterData.dryLevel = EditorGUILayout.Slider(filterData.dryLevel, -10000.0f, 0.0f);
                        EditorGUILayout.EndHorizontal();
                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField("Reference High frequency in Hz.");
                        filterData.hfReference = EditorGUILayout.Slider(filterData.hfReference, 20f, 20000.0f);
                        EditorGUILayout.EndHorizontal();
                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField("Reference Low frequency in Hz.");
                        filterData.hfReference = EditorGUILayout.Slider(filterData.hfReference, 20f, 1000f);
                        EditorGUILayout.EndHorizontal();
                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField("Late reflections (Room) in mB.");
                        filterData.reflectionsDelay = EditorGUILayout.Slider(filterData.reflectionsDelay, -10000f, 2000f);
                        EditorGUILayout.EndHorizontal();
                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField("Early reflections (Room) in mB.");
                        filterData.reflectionsLevel = EditorGUILayout.Slider(filterData.reflectionsLevel, -10000f, 1000f);
                        EditorGUILayout.EndHorizontal();
                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField("Late reverberation delay (first reflection ) in Secs.");
                        filterData.reverbDelay = EditorGUILayout.Slider(filterData.reverbDelay, 0.0f, 0.1f);
                        EditorGUILayout.EndHorizontal();
                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField("Late reverberation level (Room) in mB.");
                        filterData.reverbLevel = EditorGUILayout.Slider(filterData.reverbLevel, -10000f, 2000f);
                        EditorGUILayout.EndHorizontal();
                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField("Reverb Preset");
#if UNITY_2017_3_OR_NEWER
                        filterData.reverbPreset = (AudioReverbPreset)EditorGUILayout.EnumFlagsField(filterData.reverbPreset);
#else
                        filterData.reverbPreset = (AudioReverbPreset)EditorGUILayout.EnumMaskField(filterData.reverbPreset);
#endif
                        EditorGUILayout.EndHorizontal();
                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField("Room Effect Level");
                        filterData.room = EditorGUILayout.Slider(filterData.room, -10000f, 0f);
                        EditorGUILayout.EndHorizontal();
                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField("Room effect high-frequency level mB.");
                        filterData.roomHF = EditorGUILayout.Slider(filterData.roomHF, -10000f, 0f);
                        EditorGUILayout.EndHorizontal();
                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField("Room effect low-frequency level in mB.");
                        filterData.roomLF = EditorGUILayout.Slider(filterData.roomLF, -10000f, 0f);
                        EditorGUILayout.EndHorizontal();

                    }
                    EditorGUILayout.EndFadeGroup();
                    EditorGUILayout.EndVertical();

                    EditorGUILayout.BeginVertical("box");//"Fade In", 
                    m_UseFadeIn.target = EditorGUILayout.ToggleLeft("Fade In", m_UseFadeIn.target);
                    if (EditorGUILayout.BeginFadeGroup(m_UseFadeIn.faded))
                    {
                        if (m_NodeToDraw.AudioFilters.FadeIn == null) { m_NodeToDraw.AudioFilters.FadeIn = new AudioFadeInFilterData(); }
                        AudioFadeInFilterData filterData = m_NodeToDraw.AudioFilters.FadeIn;

                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField("Fade Type");
                        filterData.Type = (AudioFadeInFilterData.EFadeType)EditorGUILayout.EnumPopup(filterData.Type);
                        EditorGUILayout.EndHorizontal();
                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField("Realtime curve");
                        if (filterData.Fade == null)
                        {
                            filterData.Fade = AnimationCurve.EaseInOut(0, 0, 1, 1);
                        }
                        filterData.Fade = EditorGUILayout.CurveField(filterData.Fade);
                        EditorGUILayout.EndHorizontal();
                    }
                    EditorGUILayout.EndFadeGroup();
                    EditorGUILayout.EndVertical();

                    EditorGUILayout.BeginVertical("box");//"Fade out", 
                    m_UseFadeOut.target = EditorGUILayout.ToggleLeft("Fade Out", m_UseFadeOut.target);
                    if (EditorGUILayout.BeginFadeGroup(m_UseFadeOut.faded))
                    {
                        if (m_NodeToDraw.AudioFilters.FadeOut == null) { m_NodeToDraw.AudioFilters.FadeOut = new AudioFadeOutFilterData(); }
                        AudioFadeOutFilterData filterData = m_NodeToDraw.AudioFilters.FadeOut;

                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField("Fade Type");
                        filterData.Type = (AudioFadeOutFilterData.EFadeType)EditorGUILayout.EnumPopup(filterData.Type);
                        EditorGUILayout.EndHorizontal();
                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField("Realtime curve");
                        if (filterData.Fade == null)
                        {
                            filterData.Fade = AnimationCurve.EaseInOut(0, 1, 1, 0);
                        }
                        filterData.Fade = EditorGUILayout.CurveField(filterData.Fade);
                        EditorGUILayout.EndHorizontal();
                    }
                    EditorGUILayout.EndFadeGroup();
                    EditorGUILayout.EndVertical();

                    if (GUI.changed)
                    {
                        m_NodeToDraw.UseChorusFilter = m_UseChorusFilter.target;
                        m_NodeToDraw.UseDistortionFilter = m_UseDistortionFilter.target;
                        m_NodeToDraw.UseEchoFilter = m_UseEchoFilter.target;
                        m_NodeToDraw.UseHighPassFilter = m_UseHighPassFilter.target;
                        m_NodeToDraw.UseLowPassFilter = m_UseLowPassFilter.target;
                        m_NodeToDraw.UseReverbFilter = m_UseReverbFilter.target;
                        m_NodeToDraw.UseFadeIn = m_UseFadeIn.target;
                        m_NodeToDraw.UseFadeOut = m_UseFadeOut.target;
                        m_NodeToDraw.UpdateFilterHolder();
                    }
                }

            }
            EditorGUILayout.EndVertical();
        }

        private void DisplayChildren(AudioManagerCategory node)
        {
            m_ListIncrIdx++;
            var bgStyle = m_ListIncrIdx % 2 == 0 ? GUI.skin.FindStyle("OL EntryBackEven") : GUI.skin.FindStyle("OL EntryBackOdd"); //TODO Thorbjorn: Use other style, make custom one instead?
            bgStyle.fixedHeight = 22;
            bgStyle.margin = new RectOffset(0, 0, 0, 0);

            var foldoutStyle = EditorStyles.foldout;
            foldoutStyle.fontStyle = FontStyle.Bold;

            if (node == null) return;
            if (node.Children == null || node.Children.Count == 0)
            {
                EditorGUI.indentLevel++;
                EditorGUI.indentLevel++;
                GUILayout.BeginHorizontal(bgStyle);
                EditorGUILayout.SelectableLabel(node.ID, GUILayout.Height(20f));
                int nextControlID = GetLastControlId();
                if (GUIUtility.hotControl == nextControlID)
                {
                    m_NodeToDraw = node;
                }
                if (GUILayout.Button("+", GUILayout.Width(20)))
                {
                    node.Add(m_AudioManagerRootData.CreateAudioManagerCategory("test"));
                }

                if (GUILayout.Button("-", GUILayout.Width(20)))
                {
                    node.RemoveFromTree();
                    GUILayout.EndHorizontal();
                    EditorGUI.indentLevel--;
                    EditorGUI.indentLevel--;
                    return;
                }
                GUILayout.EndHorizontal();
                EditorGUI.indentLevel--;
                EditorGUI.indentLevel--;
                return;
            }
            else
            {
                EditorGUI.indentLevel++;
                GUILayout.BeginHorizontal(bgStyle);
                node.Foldout = EditorGUILayout.Foldout(node.Foldout, node.ID, EditorStyles.foldout);
                int nextControlID = GetLastControlId();
                if (GUIUtility.hotControl == nextControlID)
                {
                    m_NodeToDraw = node;
                }
                if (GUILayout.Button("+", GUILayout.Width(20)))
                {
                    node.Add(m_AudioManagerRootData.CreateAudioManagerCategory("test"));
                    m_AudioManagerRootData.ReconstructTreeChildren();
                    m_Tree = m_AudioManagerRootData.TreeData;
                    m_TreeView.Reload();
                }
                bool nodeRemoved = false;
                if (GUILayout.Button("-", GUILayout.Width(20)))
                {
                    nodeRemoved = node.RemoveFromTree();
                    GUILayout.EndHorizontal();
                    EditorGUI.indentLevel--;
                    return;
                }
                GUILayout.EndHorizontal();
                if (!nodeRemoved && node.Children != null && node.Count > 0)
                    if (node.Foldout)
                    {
                        List<AudioManagerCategory> ChildBuffer = node.Children.Values.ToList();
                        foreach (AudioManagerCategory entry in ChildBuffer)
                            DisplayChildren(entry);

                    }
                EditorGUI.indentLevel--;
            }
            return;
        }

        private AudioManagerData LoadOrCreateAudioData()
        {
            AudioPreferences p = AudioPreferences.Instance;
            AudioManagerData data = AssetDatabase.LoadAssetAtPath<AudioManagerData>(p.AudioManagerDataPrefabPath);
            if (data == null)
            {
                string dir = Path.GetDirectoryName(p.AudioManagerDataPrefabPath);
                if (!Directory.Exists(dir))
                {
                    Directory.CreateDirectory(dir);
                }

                GameObject prefabGO = new GameObject();
                prefabGO.AddComponent<AudioManagerData>();

#if UNITY_2018_3_OR_NEWER
                PrefabUtility.SaveAsPrefabAsset(prefabGO, p.AudioManagerDataPrefabPath);
#else
                UnityEngine.Object prefab = PrefabUtility.CreateEmptyPrefab(p.AudioManagerDataPath);
                PrefabUtility.ReplacePrefab(prefabGO, prefab, ReplacePrefabOptions.ConnectToPrefab);
#endif
                DestroyImmediate(prefabGO);
                
                data = AssetDatabase.LoadAssetAtPath<AudioManagerData>(p.AudioManagerDataPrefabPath);
                data.InitTree();
            }
            return data;
        }

        private void OnEnable()
        {
            m_AudioManagerRootData = LoadOrCreateAudioData();
            m_AudioManagerRootData.ReconstructTreeChildren();
            m_Tree = m_AudioManagerRootData.TreeData;

            if (m_TreeViewState == null)
                m_TreeViewState = new TreeViewState();

            m_TreeView = new AudioManagerTreeView(m_TreeViewState, m_AudioManagerRootData, m_Tree);
            m_TreeView.OnSelectedCategory = OnSelectedCategory;

            m_SearchField = new SearchField();
            m_SearchField.downOrUpArrowKeyPressed += m_TreeView.SetFocusAndEnsureSelectedItem;

            EditorApplication.update += ManualUpdate;
        }

        private void OnSelectedCategory(AudioManagerCategory[] nodes)
        {
            m_NodeToDraw = nodes[0];
        }

        private void OnDisable()
        {
            if (m_IsChanged)
            {
                Save();
            }
        }

        public void Save()
        {
            m_AudioManagerRootData.TreeData = m_Tree;
            m_AudioManagerRootData.SaveTree();
            SaveLeafsToEnum(m_AudioManagerRootData.TreeData);
#if !UNITY_2018_2_OR_NEWER
            EditorUtility.SetDirty(m_AudioManagerRootData);
            AssetDatabase.SaveAssets();
            AssetDatabase.Refresh();
#endif

            m_IsChanged = false;
        }
    }
}
